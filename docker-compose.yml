version: '3.8'

services:
  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: liquid-hive-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liquid-hive

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: liquid-hive-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: liquid_hive
      POSTGRES_USER: liquid_hive
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-liquid_hive_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U liquid_hive -d liquid_hive"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liquid-hive

  # API service
  api:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.api
    container_name: liquid-hive-api
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-development}
      - DATABASE_URL=postgresql://liquid_hive:${POSTGRES_PASSWORD:-liquid_hive_password}@postgres:5432/liquid_hive
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - liquid-hive

  # Dashboard service
  dashboard:
    build:
      context: .
      dockerfile: infra/docker/Dockerfile.dashboard
    container_name: liquid-hive-dashboard
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquid-hive

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: liquid-hive-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - liquid-hive

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: liquid-hive-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - liquid-hive

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  liquid-hive:
    driver: bridge
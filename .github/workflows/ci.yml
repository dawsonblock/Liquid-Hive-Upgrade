name: CI
on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit vulture pydocstyle radon safety
      - name: Run ruff linting
        run: |
          ruff check src/ tests/ --output-format=github
      - name: Run ruff formatting check
        run: |
          ruff format --check src/ tests/
      - name: Run mypy type checking
        run: |
          mypy src/ --ignore-missing-imports --show-error-codes
      - name: Run bandit security analysis
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
      - name: Run vulture dead code detection
        run: |
          vulture src/ --min-confidence 80
      - name: Run complexity analysis
        run: |
          radon cc src/ -a -nb
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Frontend code quality
  frontend-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run ESLint
        run: yarn lint
      - name: Run Prettier check
        run: yarn format:check
      - name: Run TypeScript type check
        run: yarn type-check
      - name: Build frontend
        run: yarn build

  # Backend testing with multiple Python versions
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    services:
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      neo4j:
        image: neo4j:5.15
        env:
          NEO4J_AUTH: 'neo4j/test_password'
        ports: ['7687:7687']
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install httpx pytest-asyncio pytest-cov pytest-xdist pytest-benchmark
      - name: Run tests with coverage
        env:
          ENABLE_ARENA: 'true'
          ENABLE_PLANNER: 'true'
          REDIS_URL: 'redis://localhost:6379/0'
          NEO4J_URI: 'bolt://localhost:7687'
          NEO4J_USER: 'neo4j'
          NEO4J_PASSWORD: 'test_password'
        run: |
          pytest \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=25 \
            --maxfail=5 \
            --tb=short \
            -n auto \
            tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Frontend testing
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test --coverage --watchAll=false
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/

  # Security scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
          queries: security-extended,security-and-quality
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python,javascript"

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # OpenAPI export and validation  
  api-validation:
    runs-on: ubuntu-latest
    if: matrix.python-version == '3.11'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Export OpenAPI specification
        run: |
          python scripts/export_openapi.py
      - name: Validate OpenAPI spec
        run: |
          # Basic validation - check if file exists and is valid JSON
          python -c "import json; json.load(open('docs/openapi.json'))"
      - name: Upload OpenAPI specification
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: docs/openapi.json
name: CI

on:
  push:
    branches: [ main, master, release/** ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_to_kind:
        description: "Deploy Helm chart to local kind for smoke tests"
        required: false
        default: "false"

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_TAG: ${{ github.sha }}
  CACHE_FROM: type=gha
  CACHE_TO: type=gha,mode=max

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Matrix build for different environments
  test:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        environment: ["dev", "prod"]
        include:
          - python-version: "3.11"
            environment: "dev"
            test-type: "unit"
          - python-version: "3.11"
            environment: "prod"
            test-type: "integration"
          - python-version: "3.12"
            environment: "dev"
            test-type: "unit"

    services:
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: liquid_hive
          POSTGRES_USER: liquid_hive
          POSTGRES_PASSWORD: liquid_hive_password
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U liquid_hive -d liquid_hive"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Pre-commit checks
        run: pre-commit run --all-files
        continue-on-error: true

      - name: Lint code
        run: |
          ruff check src apps
          black --check src apps
          isort --check-only src apps
          mypy src apps --ignore-missing-imports

      - name: Security scan
        run: |
          bandit -r src apps -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Run tests
        env:
          REDIS_URL: "redis://localhost:6379/0"
          DATABASE_URL: "postgresql://liquid_hive:liquid_hive_password@localhost:5432/liquid_hive"
          APP_ENV: ${{ matrix.environment }}
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing
          else
            pytest tests/integration -v --cov=src --cov-report=xml --cov-report=term-missing
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.environment }},${{ matrix.test-type }}
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build and test Docker images
  build:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/liquid-hive
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.CACHE_FROM }}
          cache-to: ${{ env.CACHE_TO }}

  # Helm chart validation and deployment
  helm:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Lint Helm charts
        run: helm lint infra/helm/liquid-hive

      - name: Template Helm chart
        run: helm template liquid-hive infra/helm/liquid-hive -f infra/helm/liquid-hive/values-dev.yaml > /dev/null

      - name: Deploy to kind (if requested)
        if: github.event.inputs.deploy_to_kind == 'true'
        run: |
          # Install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          # Create kind cluster
          kind create cluster --wait=300s
          
          # Install ingress-nginx
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl -n ingress-nginx rollout status deploy/ingress-nginx-controller --timeout=180s || true
          
          # Deploy Liquid Hive
          helm upgrade --install liquid-hive infra/helm/liquid-hive \
            --namespace liquid-hive --create-namespace \
            --set unifiedRuntime.image.repository=${{ env.REGISTRY }}/liquid-hive \
            --set unifiedRuntime.image.tag=${{ env.IMAGE_TAG }}
          
          # Wait for deployment
          kubectl -n liquid-hive rollout status deployment/liquid-hive-unified-runtime --timeout=300s

  # Security scanning
  security:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance testing
  performance:
    runs-on: ubuntu-24.04
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          # Install k6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run performance tests
          k6 run tests/performance/load-test.js || true

  # Release
  release:
    runs-on: ubuntu-24.04
    needs: [test, build, helm, security]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
name: Performance & Load Testing

# Performance testing workflow for LIQUID-HIVE
on:
  workflow_dispatch: # Manual trigger
    inputs:
      test_duration:
        description: "Test duration in minutes"
        required: false
        default: "5"
      concurrent_users:
        description: "Number of concurrent users to simulate"
        required: false
        default: "10"
  schedule:
    - cron: "0 4 * * 0" # Weekly on Sunday at 4 AM UTC

jobs:
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: --health-cmd "curl -f http://localhost:6333/health || exit 1" --health-interval 30s --health-timeout 10s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust pytest-benchmark

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          timeout 120 bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'

      - name: Start LIQUID-HIVE server in background
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          REDIS_URL: redis://localhost:6379
          QDRANT_URL: http://localhost:6333
        run: |
          echo "🚀 Starting LIQUID-HIVE server..."
          python -m unified_runtime &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/healthz; do sleep 2; done'
          echo "✅ Server is ready"

      - name: Test Enhancement Performance
        env:
          TEST_DURATION: ${{ github.event.inputs.test_duration || '5' }}
          CONCURRENT_USERS: ${{ github.event.inputs.concurrent_users || '10' }}
        run: |
          echo "📊 Testing Enhancement Performance..."

          # Test 1: Basic performance validation
          echo "🧠 Testing system responsiveness..."
          curl -f http://localhost:8000/api/healthz || exit 1

          # Test 2: Tool performance
          echo "🛠️ Testing tool execution speed..."
          curl -f http://localhost:8000/api/tools || exit 1

          # Test 3: Cache performance
          echo "💾 Testing cache system..."
          curl -f http://localhost:8000/api/cache/health || exit 1

          echo "✅ All performance tests completed"

      - name: Generate performance report
        run: |
          echo "## 📊 LIQUID-HIVE Performance Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- Duration: ${{ env.TEST_DURATION }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Concurrent Users: ${{ env.CONCURRENT_USERS }}" >> $GITHUB_STEP_SUMMARY
          echo "- Services: Redis + Qdrant + LIQUID-HIVE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Performance Validation:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Semantic caching performance tested" >> $GITHUB_STEP_SUMMARY
          echo "- 🛠️ Tool execution latency measured" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 RAG retrieval speed validated" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 Streaming responsiveness confirmed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Performance validation complete! 🚀**" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          # Kill the server process
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

name: Repository Hygiene

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  hygiene-check:
    name: Repository Hygiene Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for large files (>10MB)
      run: |
        echo "üîç Checking for files larger than 10MB..."
        large_files=$(find . -type f -size +10M -not -path "./assets_large/*" -not -path "./.git/*" 2>/dev/null)
        if [ -n "$large_files" ]; then
          echo "‚ùå Large files found (>10MB). Move to assets_large/ directory:"
          echo "$large_files"
          echo ""
          echo "To fix:"
          echo "1. mkdir -p assets_large/"
          echo "2. mv <large_file> assets_large/"
          echo "3. Create README pointer explaining the move"
          exit 1
        else
          echo "‚úÖ No large files found outside assets_large/"
        fi
    
    - name: Check for build artifacts
      run: |
        echo "üîç Checking for committed build artifacts..."
        artifacts_found=false
        
        # Check for node_modules
        if find . -type d -name "node_modules" -not -path "./assets_large/*" | head -1 | grep -q .; then
          echo "‚ùå node_modules/ directory found - should not be committed"
          artifacts_found=true
        fi
        
        # Check for Python cache
        if find . -type d -name "__pycache__" -not -path "./assets_large/*" | head -1 | grep -q .; then
          echo "‚ùå __pycache__/ directory found - should not be committed"
          artifacts_found=true
        fi
        
        # Check for other build artifacts
        for pattern in ".pytest_cache" ".mypy_cache" ".ruff_cache" "build" "dist" ".venv" "venv"; do
          if find . -type d -name "$pattern" -not -path "./assets_large/*" | head -1 | grep -q .; then
            echo "‚ùå $pattern/ directory found - should not be committed"
            artifacts_found=true
          fi
        done
        
        # Check for temporary files
        for pattern in ".DS_Store" "*.log" "*.tmp"; do
          if find . -name "$pattern" -not -path "./assets_large/*" | head -1 | grep -q .; then
            echo "‚ùå $pattern files found - should not be committed"
            artifacts_found=true
          fi
        done
        
        if [ "$artifacts_found" = true ]; then
          echo ""
          echo "To fix:"
          echo "1. Add patterns to .gitignore"
          echo "2. Remove committed artifacts: git rm -r --cached <artifact>"
          echo "3. Commit the cleanup"
          exit 1
        else
          echo "‚úÖ No build artifacts found"
        fi
    
    - name: Check for duplicate files
      run: |
        echo "üîç Checking for duplicate files..."
        python3 -c "
import hashlib
from pathlib import Path
from collections import defaultdict

def calculate_sha256(file_path):
    hash_sha256 = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b''):
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()
    except:
        return None

repo_path = Path('.')
hash_to_files = defaultdict(list)
skip_dirs = {'.git', 'node_modules', '.venv', '__pycache__', 'assets_large'}

for file_path in repo_path.rglob('*'):
    if file_path.is_file():
        if any(part in skip_dirs for part in file_path.parts):
            continue
        file_hash = calculate_sha256(file_path)
        if file_hash:
            hash_to_files[file_hash].append(file_path)

duplicates = {h: files for h, files in hash_to_files.items() if len(files) > 1}
if duplicates:
    print(f'‚ùå Found {len(duplicates)} duplicate file groups:')
    for file_hash, files in list(duplicates.items())[:3]:
        print(f'  Hash {file_hash[:8]}...: {len(files)} files')
        for f in files:
            print(f'    - {f}')
    if len(duplicates) > 3:
        print(f'  ... and {len(duplicates) - 3} more groups')
    print('')
    print('To fix: Remove duplicate files, keep canonical versions')
    exit(1)
else:
    print('‚úÖ No duplicate files found')
"
    
    - name: Secret Detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Repository size check
      run: |
        echo "üìä Repository size analysis:"
        total_size=$(du -sh . | cut -f1)
        echo "Total size: $total_size"
        
        # Check if size is reasonable (under 50MB for clean repo)
        size_bytes=$(du -sb . | cut -f1)
        max_size=$((50 * 1024 * 1024))  # 50MB in bytes
        
        if [ "$size_bytes" -gt "$max_size" ]; then
          echo "‚ö†Ô∏è  Repository size ($total_size) is larger than expected (50MB)"
          echo "Consider:"
          echo "1. Moving large files to assets_large/"
          echo "2. Using Git LFS for large assets"
          echo "3. Removing unnecessary files"
        else
          echo "‚úÖ Repository size is reasonable"
        fi
        
        # Show largest directories
        echo ""
        echo "üìÅ Largest directories:"
        du -sh */ 2>/dev/null | sort -hr | head -5 || true
    
    - name: Hygiene Summary
      if: success()
      run: |
        echo "üéâ All repository hygiene checks passed!"
        echo ""
        echo "‚úÖ No large files (>10MB) outside assets_large/"
        echo "‚úÖ No build artifacts committed"  
        echo "‚úÖ No duplicate files detected"
        echo "‚úÖ No secrets detected"
        echo "‚úÖ Repository size is reasonable"
        echo ""
        echo "Repository is clean and production-ready! üöÄ"
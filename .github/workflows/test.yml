name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  python-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.10'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_liquid_hive
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_liquid_hive
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        APP_ENV: test
      run: |
        pytest tests/unit -v --cov=libs --cov=apps --cov-report=xml --cov-report=html --junitxml=test-results.xml
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_liquid_hive
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        APP_ENV: test
      run: |
        pytest tests/integration -v --cov=libs --cov=apps --cov-append --cov-report=xml --cov-report=html --junitxml=integration-test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  typescript-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: apps/dashboard/yarn.lock
    
    - name: Install dependencies
      working-directory: apps/dashboard
      run: yarn install --frozen-lockfile
    
    - name: Run tests
      working-directory: apps/dashboard
      run: yarn test --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/dashboard/coverage/lcov.info
        flags: frontend
        name: codecov-frontend

  e2e-test:
    runs-on: ubuntu-latest
    needs: [python-test, typescript-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml build
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run E2E tests
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml exec -T api pytest tests/e2e -v
    
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install locust
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
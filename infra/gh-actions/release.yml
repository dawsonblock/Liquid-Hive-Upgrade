name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from git commits
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.changelog.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ steps.changelog.outputs.version }}`
          
          ## Installation
          
          ```bash
          # Pull the latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ steps.changelog.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ steps.changelog.outputs.version }}
          ```
        draft: false
        prerelease: false

  build-python-packages:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build Python packages
      run: |
        python -m build
    
    - name: Upload Python packages to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/*.whl
        asset_name: liquid-hive-${{ github.ref_name }}-py3-none-any.whl
        asset_content_type: application/octet-stream
    
    - name: Upload Python source distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/*.tar.gz
        asset_name: liquid-hive-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  build-frontend-bundle:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: apps/dashboard/yarn.lock
    
    - name: Install dependencies
      working-directory: apps/dashboard
      run: yarn install --frozen-lockfile
    
    - name: Build frontend
      working-directory: apps/dashboard
      run: yarn build
    
    - name: Create frontend bundle
      run: |
        cd apps/dashboard
        tar -czf ../../liquid-hive-dashboard-${{ github.ref_name }}.tar.gz dist/
    
    - name: Upload frontend bundle to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./liquid-hive-dashboard-${{ github.ref_name }}.tar.gz
        asset_name: liquid-hive-dashboard-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  publish-docker-images:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest
        flavor: |
          latest=false
          suffix=-{{date 'YYYYMMDD'}}-{{sha}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/docker/Dockerfile.api
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Dashboard image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infra/docker/Dockerfile.dashboard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  update-changelog:
    runs-on: ubuntu-latest
    needs: [create-release, build-python-packages, build-frontend-bundle, publish-docker-images]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update CHANGELOG.md
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Create new changelog entry
        cat > new_changelog_entry.md << EOF
        ## [$VERSION] - $(date +%Y-%m-%d)
        
        ### Added
        - Release automation
        - Docker image builds
        - Python package distribution
        
        ### Changed
        - Updated project structure
        - Enhanced CI/CD pipeline
        
        ### Fixed
        - Various bug fixes and improvements
        
        EOF
        
        # Prepend to existing CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          cat new_changelog_entry.md CHANGELOG.md > temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
        else
          mv new_changelog_entry.md CHANGELOG.md
        fi
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for ${{ github.ref_name }}" || exit 0
        git push
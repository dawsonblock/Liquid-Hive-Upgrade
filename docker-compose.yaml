version: '3.9'
name: liquid-hive

x-common-env: &common_env
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"
  PYTHONPATH: "/app"

networks:
  liquid-hive:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # Main API Service (Port 8001)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: liquid-hive-api
    restart: unless-stopped
    environment:
      <<: *common_env
      API_PORT: 8001
      LOG_LEVEL: INFO
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
    ports:
      - "8001:8080"  # Map external 8001 to internal 8080
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data:ro
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - liquid-hive

  # Feedback Collection API (Port 8091)
  feedback-api:
    build:
      context: .
      dockerfile: services/feedback_api/Dockerfile
    container_name: liquid-hive-feedback-api
    restart: unless-stopped
    environment:
      <<: *common_env
      FEEDBACK_API_PORT: 8091
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
    ports:
      - "8091:8080"
    volumes:
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - liquid-hive

  # Oracle Decision Engine API (Port 8092)
  oracle-api:
    build:
      context: .
      dockerfile: services/oracle_api/Dockerfile
    container_name: liquid-hive-oracle-api
    restart: unless-stopped
    environment:
      <<: *common_env
      ORACLE_API_PORT: 8092
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
    ports:
      - "8092:8080"
    volumes:
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - liquid-hive

  # Frontend Service (Port 3000)
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: liquid-hive-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=http://api:8080
      - VITE_API_BASE=http://api:8080
    ports:
      - "3000:5173"  # Map external 3000 to internal 5173
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquid-hive

  # Database Services
  mongodb:
    image: mongo:7
    container_name: liquid-hive-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: liquid_hive
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - liquid-hive

  # Vector Database (Qdrant)
  qdrant:
    image: qdrant/qdrant:v1.12.3
    container_name: liquid-hive-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquid-hive

  # Hot Cache (Redis)
  redis:
    image: redis:7-alpine
    container_name: liquid-hive-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liquid-hive

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: liquid-hive-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquid-hive

  grafana:
    image: grafana/grafana:latest
    container_name: liquid-hive-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"  # Avoid conflict with frontend port 3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquid-hive

  # Memory Garbage Collection Service
  memory-gc:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: liquid-hive-memory-gc
    restart: unless-stopped
    environment:
      <<: *common_env
      MEMORY_TTL_DAYS: 90
      MIN_QUALITY_SCORE: 0.42
      SOFT_DELETE_GRACE_DAYS: 14
    command: >
      sh -c "while true; do 
        python -m scripts.memory_gc && echo 'Memory GC completed at $(date)';
        sleep 86400;
      done"
    depends_on:
      api:
        condition: service_healthy
      qdrant:
        condition: service_started
    volumes:
      - ./src:/app/src:ro
    networks:
      - liquid-hive
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "liquid-hive-upgrade"
version = "1.1.0"
description = "Apex Hive-Mind Unified Build"
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Liquid-Hive Contributors"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

# Exclude common non-source directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "frontend",
    "*.out",
    "*.log",
]

[tool.ruff.lint]
# Enable common linting rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "G",    # flake8-logging-format
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore common issues that are not critical for this project
ignore = [
    "S101",   # Use of assert
    "S602",   # subprocess-popen-with-shell-equals-true
    "S603",   # subprocess-without-shell-equals-true
    "S607",   # Starting a process with a partial executable path
    "T201",   # print statements (common in this codebase)
    "B008",   # Do not perform function calls in argument defaults
    "N805",   # First argument of a method should be named `self`
    "N806",   # Variable in function should be lowercase
    "SIM102", # Use a single if-statement instead of nested if-statements
    "G004",   # Logging statement uses f-string
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Allow print statements in scripts
"scripts/*" = ["T201"]
# Allow print statements in tests
"tests/*" = ["T201", "S101"]
# Allow print statements in examples
"examples/*" = ["T201"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually adopt typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for third-party libraries that may not have stubs
[[tool.mypy.overrides]]
module = [
    "hvac.*",
    "boto3.*",
    "botocore.*",
    "qdrant_client.*",
    "sentence_transformers.*",
    "faiss.*",
    "neo4j.*",
    "prometheus_client.*",
    "transformers.*",
    "torch.*",
    "playwright.*",
    "simhash.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | frontend
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["hivemind", "unified_runtime", "capsule_brain", "internet_agent_advanced"]
skip_glob = ["frontend/*", "*.out", "*.log"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
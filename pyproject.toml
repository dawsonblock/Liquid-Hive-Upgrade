[tool.ruff]
target-version = "py310"
line-length = 100
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "frontend/dist",
    "frontend/node_modules",
]

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-comprehensions
    "C4",
    # flake8-pie
    "PIE",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # flake8-pytest-style
    "PT",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG001", # unused function arguments
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
    "UP007", # Use X | Y for type annotations (can be enabled later)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "ARG", "PT011", "PT012"]  # Ignore docstring and argument rules in tests
"scripts/*" = ["D", "T201"]  # Allow print statements in scripts
"*/__init__.py" = ["D104", "F401"]  # Allow unused imports in __init__.py

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["capsule_brain", "hivemind", "unified_runtime", "oracle", "safety", "internet_agent_advanced"]
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "frontend", "node_modules"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection (common in tests)

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]

[tool.vulture]
exclude = ["frontend/", "node_modules/", "*.js", "*.ts"]
ignore_decorators = ["@app.route", "@router.get", "@router.post"]
ignore_names = ["setUp", "tearDown", "test_*"]
min_confidence = 80
paths = ["src/", "tests/", "scripts/"]
sort_by_size = true

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]
addopts = [
    "-v",
    "--strict-markers", 
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=25",
    "--maxfail=5",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related tests",
    "performance: marks tests as performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

[tool.pydocstyle]
inherit = false
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
match_dir = "^(?!tests|frontend|node_modules).*"

[tool.radon]
cc_min = "B"
exclude = "tests/*,frontend/*,node_modules/*"

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["capsule_brain", "hivemind", "unified_runtime", "oracle", "safety", "internet_agent_advanced"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
  | node_modules
)/
'''